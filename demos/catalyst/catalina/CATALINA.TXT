This directory contains scripts to compile a self-hosted version of Catalina. 

Self-hosted Catalina is supported on the Propeller 2 only. It requires a 
P2_EDGE with 32MB PSRAM installed (i.e. the P2-EC32MB) or a P2_EDGE or P2_EVAL
with the HyperRAM add-on board. It also requires a micro SD card and a VT100 
compatible terminal emulator. 

Strictly speaking, only the vi text editor actually REQUIRES a VT100 
compatible teminal emulator, but using one is recommended.

For a Windows terminal emulator, you can use payload with a command like:

   payload -pX -b230400 -i -q2

where X is the port your P2 is connected to. You can also use any other VT100
compatible terminal emulator, such as Catalina's Comms program, or puTTY, or 
Tera Term. Select the appropriate serial port and set the baud rate to 
230400 baud.

The self-hosted version of Catalina  supports compiling TINY, NATIVE, COMPACT, 
XMM SMALL or XMM LARGE programs. Also, the XMM RAM can be USED by a C program 
compiled on the Propeller - see the 'psram.c' demo program.

To build the self-hosted version of Catalina, use the build_all script. For 
example:

   build_all P2_EDGE SIMPLE VT100 USE_COLOR OPTIMIZE MHZ_200 
or
   build_all P2_EVAL SIMPLE VT100 USE_COLOR OPTIMIZE MHZ_200 

NOTE: Since it is always required, the LARGE option is added by the build_all
      script automatically. The script also adds the CACHED_64K option. To 
      change the size of the cache, modify the script.

The second parameter can be used to indicate whether PSRAM or HYPER RAM is to 
be used, on platforms (such as the P2-EC32MB) which can support both. If not
specified, the default is to use PSRAM on the P2_EDGE and HYPER RAM on the
P2_EVAL. For example:

   build_all P2_EDGE PSRAM SIMPLE VT100 USE_COLOR OPTIMIZE MHZ_200 
or
   build_all P2_EDGE HYPER SIMPLE VT100 USE_COLOR OPTIMIZE MHZ_200 

The build_all script will first copy the latest Catalina sources from the 
current %LCCDIR%/source directory, then build the various components required.
Finally, it will copy the results to the Catalyst image directory using the 
copy_all script (described below).

Note that not all the Catalina components are built - some are not required 
and others (like the debugger, optimizer or parallelizer) are not yet 
supported by the self-hosted version. Also note that there are some components 
in the catalina directory (such as Lua scripts) that are unique to the 
self-hosted version.

The copy_all script can be used to copy Catalina to an SD card, or to the 
image directory where the rest of Catalyst has been built (this is done
automatically by the build_all script). For example:

   copy_all ..\image
or
   copy_all e:

The copy_all script creates the following directories:

   bin          - Catalina executables
   include      - C include files
   lib          - C libraries
   target       - Catalina runtime support files
   tmp          - a directory used to store temporary files

All the self-hosting Catalina files are stored in these directories. The 
executable files copied to the bin directory will include:

   cpp.bin      - C preprocessor.
   rcc.bin      - C compiler.
   bcc.bin      - Catalina binder and library manager.
   spp.bin      - PASM preprocessor.
   spinc.bin    - Catalina utility to generate a C file from a binary file.
   p2asm.bin    - PASM assembler.
   pstrip.bin   - a utility to reduce the size of PASM files.
   catalina.lua - a Lua version of the PC 'catalina' command, which
                  manages the compilation process.
   binstats.lua - a Lua program to print statistic information about a binary 
                  file (code size, data size etc).
   xl_vi        - The vi text editor for very large files (the normal Catalyst 
                  vi is fine for editing C source files, but the intermediate
                  files generated by Catalina can be too large for it, so this
                  XMM LARGE version is also included.

The Lua version of the catalina command supports many but not all of the
command-line options of the PC version. Use the command catalina -h to see 
what options are currently implemented. 

Once installed, you can compile C programs at the Catalyst prompt using
the catalina command, just as you would on a PC. A selection of C demo 
programs is included. These programs are the same as the PC-based Catalina
demo C programs, but in some cases the names have been changed to meet the
Catalyst file naming limitations (i.e. it requires DOS 8.3 file names):

   hello.c           - the classic C "Hello, World" program.
   pintest.c         - a demo program to toggle an LED.
   my_prog.c & my_func.c - programs used to demonstrate libraries
   othello.c         - the othello (aka reversi) game.
   startrek.c        - the classic Star Trek game.
   chimaera.c        - an adventure game.
   diners.c          - a demo of Catalina multi-threading.
   station.c         - a demo of POSIX pthreads.
   intrrpt.c         - a demo of interrupt handling.
   psram.c           - a demo of using PSRAM.
   dbasic.c, basic.h, basic.c, tokens.h, tokens.c - Dumbo Basic.
   lhello.c, linit.c - a demo of embedding Lua in a C program

You can compile them using the following commands:

   catalina hello.c -lci -v 
   catalina othello.c -lci -v 
   catalina startrek.c -lc -lmc -v 
   catalina chimaera.c -lcx -lmc -v 
   catalina diners.c -lci -lthreads -v 
   catalina station.c -lci -lthreads -v -C NO_REBOOT
   catalina dbasic.c basic.c tokens.c -lcx -lmc -v -q -u
   catalina lhello.c linit.c -llua -lcx -lmc -W-w -v

Note that some of the demo programs require the platform and/or specific
libraries to be specified to compile correctly:

   catalina pintest.c -lci -C P2_EDGE -v
   catalina psram.c -lci -lpsram -C P2_EDGE -v
   catalina intrrpt.c -lci -lthreads -lint -C P2_EDGE -v 
or
   catalina pintest.c -lci -C P2_EVAL -v
   catalina psram.c -lci -lhyper -C P2_EVAL -v
   catalina intrrpt.c -lci -lthreads -lint -C P2_EVAL -v 

The -v flag is optional in all cases, but is recommended.    

You can demonstrate creating and using a library with the C source files
my_prog.c and my_func.c. First, note that you can compile this program without
using a library as follows:

   catalina my_prog.c my_func.c -lci -v 

However, you can also choose to put my_func.c in a library (we will call
it my_lib), and then build my_prog.c using the library. To do so, use the 
following commands:

   catalina my_func.c -c -v
   bcc -i -e my_func.obj
   mkdir lib/my_lib
   mv -f my_func.obj lib/my_lib
   mv -f catalina.idx lib/my_lib
   catalina my_prog.c -lci -lmy_lib -v

Note that the above commands can be added to a file (e.g. "build") using 
the vi text editor, and then executed in one command using "exec" - i.e:

   exec build

When using a VT100 terminal other than payload or Comms (e.g. PuTTY, minicom,
Tera Term etc) you may need to adjust the program configuration options to 
automatically add a CR when it receives an LF.

NOTE: Catalyst has a limit of 23 arguments that can be specified in a single 
      command, including in a command script. If this number is exceeded when 
      generating the compilation script, the catalina command will print the 
      message "too many command line arguments" and stop. This will usually 
      be because there are too many -C or -D options being specified. This 
      limit may be increased in a future release, but in the meantime it
      is recommended that wherever possible, Catalina symbols should be 
      defined using the CATALINA_DEFINE environment variable (instead of 
      on the command line using the -C option).

WARNING: The larger C demo programs can take a long time to compile. Even the
         standard C "hello world" program (hello.c) takes several minutes. 
         Compiling the chimaera game (approx 5,500 lines of C code) takes 
         about 1 hour. Dumbo Basic (approx 12,000 lines of C code) takes 
         about 1 hours and 40 minutes. This is why the -v option is 
         strongly recommended - without it, there is no way of telling that 
         anything is actually happening until the compilation completes.

WARNING: When Catalyst is executing a command script for a compilation,
         rebooting the propeller will not terminate the script - it will
         simply execute the next command in the script. An executing 
         script must be terminated the by holding down any key while
         rebooting the Propeller.

All the C demo programs are copied to the root directory, but it is worth 
noting that neither the source nor the output needs to be in this directory. 
They could, for example, be in a 'demos' subdirectory. However, note that 
Catalina has no concept of a 'current' directory, and will generally store its
output in the same directory as the source it is compiling. So, for instance 
to compile the file hello.c if it was in a directory called 'demos', a command
like the following might be used**:

   catalina -v demos/hello.c -lci

** Note that Catalyst uses / and not \ as the path separator - i.e. it is more
   like Linux than Windows.

This command would leave its output (hello.bin) in the demos directory. This 
means that to execute the output, the whole file name including the extension
has to be entered, since Catalina only automatically tries adding various 
extensions to things that look like commands, and those must be either in the 
root or bin directories. 

So to execute it from the demos directory, use the following command:

   demos/hello.bin

To store the output in the root or bin directories instead of the demos 
directory, add an explicit -o option to the catalina command. For example:

   catalina -v demos/hello.c -lci -o hello
or
   catalina -v demos/hello.c -lci -o bin/hello

Now when the compilation is complete, the result will be in the root or bin
directory, and can be executed by just entering the command:

   hello

Note that the -v (for verbose) option is generally recommended when using
catalina on the Propeller - it makes Catalyst echo each command in the
script as it is executed. Given that some compilations can take a long time, 
this gives a useful indication of how far the compilation has progressed.
However, note that when Catalina is used with a VGA option (rather than a 
serial option) the propeller reboots between each command, so any messages 
output by using -v will not generally be visible for long enough to be read 
anyway.

For example, here is the output that might be produced by the above command:

rm  -k /tmp/hello.cpp /tmp/hello.rcc hello.s catalina.s catalina.cmd /hello.bin
cpp -I/ -I/include -D_POSIX_SOURCE -D__STDC__=1 -D__STRICT_ANSI__ -D__extension__="" -D__cdecl="" -D__signed__=signed -D__CATALINA__ -Dlibci -D__CATALINA_libci -D__CATALINA_NATIVE -D__CATALINA_P2 demos/hello.c /tmp/hello.cpp
rcc -target=catalina_native_p2/catalyst /tmp/hello.cpp /tmp/hello.rcc
bcc -x11 -L/lib/p2/nmm -tdef -lci -p2 /tmp/hello.rcc -o catalina.s
pstrip catalina.s
spp -I/ -I/target/p2 -Dlibci -DNATIVE -DP2 /target/p2/nmmdef.t /hello.s
p2asm -v33 /hello.s
rm  -k /tmp/hello.cpp /tmp/hello.rcc hello.s catalina.s catalina.cmd
binstats  /hello.bin

code =     5380 bytes
cnst =      104 bytes
init =      332 bytes
data =        0 bytes
file =    14368 bytes

Also note that if you include the -u (untidy) option in the catalina command, 
Catalina will not delete any intermediate files, including the catalina.cmd 
file it created to execute each sub-process of the compilation. This means 
that it is easy to re-do the same compilation again. To do so, just add the 
-u option to any catalina command, then to re-do it enter the following:

   exec catalina.cmd

For more information about the self-hosted version of Catalina, refer to the 
Catalyst Reference Manual.
