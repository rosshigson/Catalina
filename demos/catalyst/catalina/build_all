#!/bin/bash
#set -x

# We want the commmand line options specified for the Catalina build_all
# script to be the same as the Catalyst build_all script, so we set any
# necessary additional options such as model, cache size (e.g. CACHED_8K, 
# CACHED_16K, CACHED_32K or CACHED_64K) and WRITE_BACK here ...

# To use the most common options:
EXTRA_OPTIONS=-"C LARGE -C CACHED_64K -C WRITE_BACK -C NO_MOUSE"

# To use the Hub Memory allocation option:
#EXTRA_OPTIONS=-"C LARGE -C HUB_MALLOC -C CACHED_64K -C WRITE_BACK -C NO_MOUSE"

# To use the XMM cache options:
#EXTRA_OPTIONS=-C LARGE -C CACHED_64K -C CACHE_LUT -C CACHE_PINS -C FLOAT_PINS -C WRITE_BACK -C NO_MOUSE

TMP_LCCDIR="$LCCDIR"
if [[ "$TMP_LCCDIR" == "" ]] ; then
   TMP_LCCDIR=/opt/catalina
fi
#
if [[ ! -e "$TMP_LCCDIR/bin/catalina_env" ]] ; then
   clear
   echo ""
   echo "ERROR: Catalina does not appear to be installed in $TMP_LCCDIR"
   echo "";
   echo "  Set the environment variable LCCDIR to where Catalina is installed.";
   echo "";
   exit
fi
#
# save value of CATALINA_DEFINE (note we must use a different TMP name!)
TMP_DEFINE_TOP2="$CATALINA_DEFINE"

if [[ "$1" != "" ]]; then
   TMP_PARAMS=`echo $1 $2 $3 $4 $5 $6 $7 $8 $9`
   if [[ "$CATALINA_DEFINE" != "" ]]; then
      if [[ "$CATALINA_DEFINE" != "$TMP_PARAMS" ]]; then

         echo ""
         echo "ERROR: Command line options conflict with CATALINA_DEFINE"
         echo ""
         echo "   CATALINA_DEFINE is set to $CATALINA_DEFINE"
         echo "   Command line options were $TMP_PARAMS"
         echo ""
         echo "   Either set CATALINA_DEFINE to null using the following command:"
         echo ""
         echo "      unset CATALINA_DEFINE"
         echo ""
         echo "   or do not specify any command line parameters"
         echo ""
	 exit

      else

         echo ""
         echo "NOTE: Environment variable CATALINA_DEFINE is set to $CATALINA_DEFINE"
         echo ""
         echo "  All programs will be built using these options. If these conflict" 
         echo "  with options specified in this file, the results may be unexpected." 
         
      fi

   else

      echo ""
      echo "NOTE: All programs will be built with options $TMP_PARAMS"
      echo ""
      echo "  If these options conflict with options specified in the Makefile,"
      echo "  the results may be unexpected."
      CATALINA_DEFINE=$TMP_PARAMS; export CATALINA_DEFINE

   fi

else

   if [[ "$CATALINA_DEFINE" != "" ]]; then

      echo ""
      echo "NOTE: Environment variable CATALINA_DEFINE is set to $CATALINA_DEFINE"
      echo ""
      echo "  All programs will be built using these options. If these conflict" 
      echo "  with options specified in this file, the results may be unexpected." 
  
   else     

      echo ""
      echo "NOTE: Environment variable CATALINA_DEFINE is not set"
      echo ""
      echo "  All programs will be built for the default target" 

   fi

fi

echo ""
echo "cleaning output directories ..."

./clean_all
mkdir lib/p2
mkdir lib/p2/cmm
mkdir lib/p2/lmm
mkdir lib/p2/nmm
mkdir lib/p2/xmm

TMP_LIBPATH=`pwd`

echo ""
echo "copying source tree ..."

cp -R $LCCDIR/source/catalina source
cp -R $LCCDIR/source/p2asm_src source
cp -R $LCCDIR/source/lcc source/
cp -R $LCCDIR/source/lib source/
cp -R $LCCDIR/target/p2 target/
cp -R $LCCDIR/source/clean* source/

echo ""
echo "cleaning source tree ..."

cd source
# ./clean_all

echo ""
echo "building library for Catalina ..."
# save CATALINA_DEFINE before building library
TMP_DEFINE_3=$CATALINA_DEFINE

if [ "$2" == "PSRAM" ] || [ "$1" == "P2_EDGE" ]; then

   TMP_PSRAM=psram
   cd lib
   ./build_psram >result.txt 2>&1
   cd ..

elif [ "$2" == "HYPER" ] || [ "$1" == "P2_EVAL" ]; then

   TMP_PSRAM=hyper
   cd lib
   ./build_hyper >result.txt 2>&1
   cd ..

else

   echo "ERROR: Only P2_EDGE or P2_EVAL are supported"
   exit

fi

# restore CATALINA_DEFINE after building library
CATALINA_DEFINE="$TMP_DEFINE_3"

echo ""
echo "building catalina components ..."
cd catalina
echo ""
echo "building bcc ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -l$TMP_PSRAM -lcx -lmc bcc.c -y
echo ""
echo "building binstats ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -l$TMP_PSRAM -lcx -lmc binstats.c -y
echo ""
echo "building binbuild ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -l$TMP_PSRAM -lcx -lmc binbuild.c -y
echo ""
echo "building pstrip ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -l$TMP_PSRAM -lcx pstrip.c -y
echo ""
echo "building spinc ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -l$TMP_PSRAM -lcx -lmc spinc.c -y
cd ..

echo ""
echo "building p2asm ..."
echo ""
cd p2asm_src
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -l$TMP_PSRAM -lcx -lmc -o p2asm symsubs.c strsubs.c p2asm.c -y
cd ..

cd lcc

# the lburg executable is not required on the Propeller, but
# it is required on the PC to process .md files
echo ""
echo "building lcc/lburg ..."
echo ""

TMP_LCCDIR="../.."

make -B lburg -f makefile.lnx HOSTFILE=etc/catalina_win32.c LCCDIR=$TMP_LCCDIR
build/lburg src/dagcheck.md build/dagcheck.c
build/lburg src/catalina.md build/catalina.c
build/lburg src/catalina_p2.md build/catalina_p2.c
build/lburg src/catalina_p2_native.md build/catalina_p2_native.c
build/lburg src/catalina_large.md build/catalina_large.c
build/lburg src/catalina_compact.md build/catalina_compact.c

echo ""
echo "building lcc/src ..."
echo ""
cd src
catalina -p2 -I ../include $EXTRA_OPTIONS -S *.c
cd ..

echo ""
echo "building lcc/lib ..."
echo ""
cd lib
catalina -p2 -I ../include $EXTRA_OPTIONS -S *.c
cd ..

echo ""
echo "building lcc/build ..."
echo ""
cd build
catalina -p2 -I ../../include $EXTRA_OPTIONS -S *.c -I../src

echo ""
echo "building liblcc ..."
echo ""
cd lib/lcc
./build_library
cd ../..

echo ""
echo "building librcc ..."
echo ""
cd lib/rcc/
./build_library
cd ../..

echo ""
echo "building cpp ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -o cpp ../cpp/cpp.c ../cpp/lex.c ../cpp/nlist.c ../cpp/tokens.c ../cpp/macro.c ../cpp/eval.c ../cpp/include.c ../cpp/hideset.c ../cpp/getopt.c ../cpp/unix.c -I../cpp -l$TMP_PSRAM -lcx -D__APPLE__ -y

echo ""
echo "building spp ..."
echo ""
catalina -p2 -L $TMP_LIBPATH -I ../../include $EXTRA_OPTIONS -o spp ../cpp/cpp.c ../cpp/lex.c ../cpp/nlist.c ../cpp/tokens.c ../cpp/macro.c ../cpp/eval.c ../cpp/include.c ../cpp/hideset.c ../cpp/getopt.c ../cpp/unix.c -I../cpp -l$TMP_PSRAM -lcx -D__APPLE__ -D SPIN_PREPROCESSOR -y

echo ""
echo "building rcc ..."
echo ""

# must remove OPTIMIZE (if present) when compiling rcc - it crashes awka!
CATALINA_DEFINE="${CATALINA_DEFINE//OPTIMIZE/}"
catalina -p2 -L $TMP_LIBPATH -I ../../include -C CLOCK -C NO_KEYBOARD $EXTRA_OPTIONS -o rcc -lrcc ../src/main.c -I../src -l$TMP_PSRAM -lcx -y
cd ../../..

echo ""
echo "copying catalina to image ..."
echo ""
./copy_all ../image

# restore original LCCDIR
export LCCDIR="$SAVE_LCCDIR"

# restore value of CATALINA_DEFINE (note we used a different TMP name!)
export CATALINA_DEFINE="$TMP_DEFINE_TOP2"
echo ""
echo "===="
echo "Done"
echo "===="
echo ""

