This document contains detailed instructions on how to build Catalina from 
source on both Windows and Linux. 

===============================================================================

                               IMPORTANT NOTE 
                               ==============

These instructions will build Catalina as a 32 bit application, but doing so
is now deprecated. See the document BUILD.TXT for instructions on building 
Catalina as a 64 bit application.

===============================================================================

The Catalina Windows binaries should execute correctly on Windows 8 or later. 
However, rebuilding Catalina from source under Windows requires Windows 
version 10 or later.

The Catalina Linux binaries should execute on a 64-bit version of Ubuntu 
Linux 23.04, but rebuilding Catalina from source can be done on Ubuntu 18.04 
or later. 

Note that if you are using Windows, and either used the Catalina Windows Setup
program, or downloaded the Windows binaries associated with a GitHub release, 
it is unlikely you will ever need to rebuild Catalina, since it does not need 
to be rebuilt to compile programs, to add new platforms, new plugins, or new 
libraries.

On Linux it is more likely you will need to build Catalina from source, since 
it may need to be rebuilt to suit other Linux distributions.

Windows
=======

This section assumes you are using Catalina 8.7, and will install it using 
the Windows installation program (Catalina_8.7_Setup.exe) so it will end 
up installed in the folder "C:\Program Files (x86)\Catalina_8.7" (if either 
of these changes, some commands will need to change accordingly).

If you instead are cloning or downloading the GitHub repository (i.e. from
https://github.com/rosshigson/Catalina), Catalina can be installed anywhere - 
e.g. a folder called "Catalina" in your home directory.

1. Install Catalina
===================

Install Catalina by executing Catalina_8.7_Setup.exe and following the 
prompts, or cloning or downloading the GitHub repository and associated
binary assets. 

There is more information on installing Catalina in the document README.md.

If you are using the Windows Setup program, make sure to select the "Install 
Catalina Source Code" option. If you have already installed Catalina but did
not install the source code, simply run the Setup program again and select 
this option.

Note that you will need additional permissions to the Catalina installation 
folders to rebuild Catalina in its default installation location. The Setup 
program by default only gives the permissions required to USE Catalina, not
BUILD it. To do this, select where Catalina was installed in File Explorer,
right click on Properties, select the Security tab and give the current user 
"Full Control". 

No matter where it is installed, rebuilding Catalina's version of Geany from 
source may also require write permission to the C: drive, to create the 
temporary folders C:\catalina and C:\geany. These temporary folders can be 
deleted once the build is complete.

2. Install MSYS2
================

Catalina must be compiled using MSYS2. Download the current MSYS2 installer 
(e.g. msys2-x86_64-20230718.exe) from www.msys2.org. Note that this installer
installs both 32 and 64 bit environments, but that the instructions below must
be executed in a MINGW32 (i.e. 32 bit) environment. Do not use MSYS2 MINGW64 
or any of the other MSYS2 options.

Execute the MSYS2 installer, and follow its instructions. 

Open an MSYS2 MINGW32 bash shell (e.g. using the MSYS2 Windows Start menu 
entry). NOTE: it must be an MSYS MINGW32 bash shell.

Execute the following command, to ensure some key packages are up to date:

   pacman --needed -Sy bash pacman pacman-mirrors msys2-runtime

Exit and re-start the MSYS2 MINGW32 bash shell and perform a general system 
update:

   pacman -Su

3. Install required packages
============================

Exit and re-start the MSYS2 MINGW32 bash shell once more, in case pacman 
updated any environment related packages.

Execute the following commands to install some necessary packages:

   pacman -S autoconf automake gettext
   pacman -S rsync dos2unix zip unzip 
   pacman -S make flex bison gawk grep 
   pacman -S ncurses ncurses-devel
   pacman -S libtool intltool pkg-config 

Execute the following pacman commands to install the packages required to 
use the 32-bit gcc compiler:

   pacman -S mingw-w64-i686-binutils 
   pacman -S mingw-w64-i686-gcc 
   pacman -S mingw-w64-i686-ncurses
   pacman -S mingw-w64-i686-glib2

Next, if the source is in a Windows directory with spaces in the path (which 
it will be if Catalina was installed to the default location - i.e. usually
"C:\Program Files (x86)" - then create a link to it without spaces. Note that 
you need to do this from a Windows command line window started using the 
"Run as Administrator" option. 

Open a Windows Command Line window (not an MSYS2 MINGW32 bash shell) and 
execute the following commands:

   mkdir C:\catalina
   cd C:\catalina
   mklink /D 8.7 "C:\Program Files (x86)\Catalina_8.7"

Then in any MSYS2 bash shell you can use the path /c/catalina/8.7 to refer to 
the Catalina installation, without worrying about spaces in the path name.

Then add the MSYS2 folders to the Windows Path (e.g. Open Settings, search 
for "environment variables" and then set the Path environment variable either 
for the system, or for a specific user account). Assuming MSYS2 is isntalled 
to the default location (c:\msys64), this would mean adding the following to 
the Path:

   C:\msys64\mingw32\bin
   C:\msys64\usr\bin

4. Build Catalina
=================

Open a Catalina Command Line Window (not an MSYS2 MINGW32 bash shell) and 
build the Catalina binaries using the following commands:

   cd %LCCDIR%\source
   build_binaries

Note that if you want to build both the Catalina binaries and the Catalina 
libraries, use the following commands instead (NOTE: This can take a long 
time to complete, and is not usually required on first installation):

   cd %LCCDIR%\source
   build_all

NOTE: The build scripts may generate warnings, but should generate no errors. 
If they do, it is most likely because of a missing package that needs to be 
identified and installed.

5. Build Geany
==============

Open an MSYS2 MINGW32 bash shell (e.g. using the MSYS2 Windows Start menu 
entry). NOTE: it must be an MSYS MINGW32 bash shell.

Use the following pacman commands to install some additional 32 bit packages
required by Geany:

   pacman -S mingw-w64-i686-gtk2 
   pacman -S mingw-w64-i686-pcre mingw-w64-i686-pcre2 
   pacman -S mingw-w64-i686-gettext-runtime
   pacman -S mingw-w64-i686-gettext-tools

Go to the geany source directory and build geany. The following commands 
assume the Catalina Geany source is in /c/catalina/8.7/source/geany - which 
may be a link! - and we want to end up with Geany in /c/geany:

   cd /c/catalina/8.7/source/geany-1.37.1
   NOCONFIGURE=1 ./autogen.sh
   ./configure --prefix=/c/geany --enable-gtk2 
   make clean
   make all
   make install

Note that on Windows, Geany must be built with gtk2 because gtk3 is not yet 
correctly implemented in MSYS2.

Next, bundle in the DLLs and other files needed by Geany. This is what makes 
it possible to move the resulting folder anywhere, and to execute Geany without 
having MSYS2 installed. Note that the build_all batch script below uses a bash
script called gtk-bundle-from-msys2.sh, which by default is a copy of the 64 
bit version found in gtk-bundle-from-msys2_64.sh. To bundle the DLLs needed 
for Geany if it is compiled as 32 bits, instead copy the version in the file 
gtk-bundle-from-msys2_32.sh to gtk-bundle-from-msys2.sh. 

Then use the following commands:

   cd ../geany-bundle
   ./build_all
   cp -R * /c/geany

The files in C:\geany (as seen from Windows) or /c/geany (as seen from MSYS2)
can then be copied into any other location. For instance, it is recommended 
to overwrite the existing versions in the Catalina distribution with the newly
built versions. To do that in the bash shell, use a command similar to the
following, where the destination directory specified is the directory where 
Catalina is installed, which - if this was in "C:\Program Files (x86)" - will 
be the link created earlier:

   cp -R /c/geany/* /c/catalina/8.7/catalina_geany/

6. Test Catalina and Geany
========================== 

Start Geany and open the "hello_world" project. You can do this from a
Catalina command-line window:

   cd %LCCDIR%/demos
   catalina_geany hello_world

Before building the program, use the Project -> Properties command to check
the options are correct for your Propeller platform. In the Catalina Options 
field, you need to add the following option if you have a Propeller 2:

   -p2

Close the Project Properties dialog and use Build -> Clean command to ensure 
there are no old versions of the program left in the folder, then use the 
Build->Build File command to build the program. 

Finally, use the Build -> Download and Interact command to download the
program to the Propeller and open a terminal window to see the output from it.


Linux
=====

These instructions have been tested on Ubuntu 18.04 and 23.04, but should also
work on other versions of Ubuntu. On other Linux distributions the package 
manager may be different, and so some commands will need to be adjusted 
accordingly.

1. Install Catalina
===================

Install Catalina by unpacking a compressed Catalina distribution 
(e.g. Catalina_8.7_Linux.tar.gz), or cloning or downloading Catalina from
the GitHub repository (i.e. https://github.com/rosshigson/Catalina) in a 
suitable directory for building, such as a subdirectory called "catalina" in 
your home directory.

There is more information on installing Catalina in the document README.md.

2. Install required packages
============================

Ensure the packages required to build Catalina are installed:

   sudo apt-get install libreadline-dev gcc-multilib libboost-dev g++
   sudo apt-get install libncurses5-dev dos2unix bison flex gawk

Note that this may install many more packages than just those listed, and 
depending on the Linux distribution, other packages may also be required.

3. Build Catalina
=================

In a bash shell, go to the directory where Catalina is installed. In this 
section, we assume Catalina has been installed in your home directory. If 
Catalina is installed elsewhere, modify the commands appropriately:

   cd ~/catalina

Manually set the permissions of the following files:

   chmod a+x bin/catalina_env
   chmod a+x bin/Set_Linux_Permissions

Set up the LCCDIR and PATH environment variables (note the pwd command must
be quoted using back quotes, not normal quotes):

   export LCCDIR=`pwd`
   source $LCCDIR/use_catalina

To ensure the files in the distribution have the correct permissions, execute
the Set_Linux_Permissions script:

   Set_Linux_Permissions

Go to the Catalina source directory and build the Catalina binaries using the 
following commands:

   cd $LCCDIR/source
   ./build_binaries

Note that if you want to build both the Catalina binaries and the Catalina 
libraries, use the following commands instead (NOTE: This can take a long 
time to complete, and is not usually required on first installation):

   cd $LCCDIR/source
   ./build_all

NOTE: The build scripts may generate warnings, but should generate no errors. 
If they do, it is most likely because of a missing package that needs to be 
identified and installed.

Catalina can be executed from the location it was built, but it is recommended
it be installed in /opt/catalina for future use:

   cd $LCCDIR
   sudo mkdir /opt/catalina
   sudo cp -R --preserve $LCCDIR/* /opt/catalina

To use the version of Catalina installed in /opt/catalina, use the 
following commands to set up Catalina's environment and path:

   export LCCDIR=/opt/catalina
   source $LCCDIR/use_catalina

4. Build Geany
==============

Ensure the packages required by Geany are installed:
   
   sudo apt-get install libgtk2.0-dev gtk-3.0 xterm
   sudo apt-get install intltool libtool-bin docutils-common

Note that this may install many more packages than just those listed, and 
depending on the Linux distribution, other packages may also be required.

Now go to the Geany source directory and build Geany:

   cd $LCCDIR/source/geany-1.37.1
   
   ./autogen.sh
   ./configure --prefix=/opt/catalina_geany --enable-gtk2

   make
   sudo make install

Note that on Linux, Geany can be built with either gtk2 or gtk3, but gtk2
is recommended, because this results in the same "llok and feel" as Geany
on Windows, where only gtk2 is currently supported.

5. Test Catalina and Geany
========================== 

Before we can use the Catalina payload loader, the current user must be added 
to the "dialout" group. To do so, use the following command (this only has to
be done once):

   sudo usermod -a -G dialout $USER

IMPORTANT: The user must log out and log back in again for this to take 
effect. 

In a new bash shell (i.e. not the one used to rebuild Catalina, if it is 
still open), execute the following commands - these have to be repeated every
time a new bash shell is started, or they can be added to the user's .bashrc 
file to be executed automatically:

   export LCCDIR=/opt/catalina
   source $LCCDIR/use_catalina

Start Geany and open the "hello_world" project:

   cd $LCCDIR/demos
   catalina_geany hello_world

Before building the program, use the Project -> Properties command to check
the options are correct for your Propeller platform. In the Catalina Options 
field, you need to add the following option if you have a Propeller 2:

   -p2

Close the Project Properties dialog and use Build -> Clean command to ensure 
there are no old versions of the program left in the folder, then use the 
Build->Build File command to build the program.

NOTE: If you get a message about "cmd.exe" not being found, then Geany is 
using the Windows version of the file 'filetypes.c' (which contains default
project build commands for files with a '.c' extension) instead of the Linux 
version. This can happen if (for example) you cloned or downloaded sources 
from GitHub (which is set up for Windows). To fix this, locate filetpes.c
in the Geany data/filedefs folder (not the src folder, which also has a file
of that name, but it is not the same file) and overwrite it with the version 
contained in filetypes.c.linux, which should be in the same folder - i.e.

   source/catalina/catalina_geany-1.37.1/data/filedefs/

and also (if it exists) in:

   catalina_geany/data/filedefs/

and also (if you have already installed Geany) in:

   /opt/catalina_geany/share/geany/data/filedefs/

The filetypes.c.linux file is also contained in the compressed archive called
catalina_geany/catalina_geany_source.zip.

Finally, use the Build -> Download and Interact command to download the program
to the Propeller and open a terminal window to see the output from it.

